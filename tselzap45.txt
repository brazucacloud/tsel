#!/bin/bash

# Tselzap Complete Installer v4.5 - Backend + Frontend + SSL (Fixed Build Issues)
# Complete WhatsApp automation system with Laravel backend + React frontend + SSL
# Author: Tselzap Team
# Date: $(date)
# Fixed: Vite build configuration and Node.js 18 compatibility issues

set -e
trap 'handle_error $LINENO $?' ERR

# Colors and formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Global variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="/var/log/tselzap-complete-install.log"
PROJECT_DIR="/var/www/tselzap"
FRONTEND_DIR="/var/www/tselzap-frontend"
PHP_VERSION=""
INSTALLATION_ID="$(date +%Y%m%d_%H%M%S)"
NODE_VERSION="18"
DOMAIN=""
SSL_ENABLED=false
EMAIL_FOR_SSL=""

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1" >> $LOG_FILE
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS: $1" >> $LOG_FILE
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1" >> $LOG_FILE
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> $LOG_FILE
}

# Progress indicator
show_progress() {
    local current=$1
    local total=$2
    local description=$3
    local percentage=$((current * 100 / total))
    local bar_length=50
    local filled_length=$((percentage * bar_length / 100))
    
    printf "\r${CYAN}[%3d%%]${NC} " $percentage
    printf "${GREEN}"
    for ((i=0; i<filled_length; i++)); do printf "█"; done
    printf "${WHITE}"
    for ((i=filled_length; i<bar_length; i++)); do printf "░"; done
    printf "${NC} %s" "$description"
    
    if [[ $current -eq $total ]]; then
        echo ""
    fi
}

# Error handling
handle_error() {
    local line_number=$1
    local error_code=$2
    local failed_function=${FUNCNAME[2]:-"unknown"}
    
    log_error "Script failed at line $line_number in function '$failed_function' with exit code $error_code"
    echo -e "\n${RED}❌ Installation failed${NC}"
    echo -e "${YELLOW}💡 Error Details:${NC}"
    echo -e "   Function: $failed_function"
    echo -e "   Line: $line_number"
    echo -e "   Exit Code: $error_code"
    echo -e "   Log File: $LOG_FILE"
    
    exit $error_code
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        echo -e "${RED}Please run: sudo $0${NC}"
        exit 1
    fi
}

# Domain and SSL configuration
configure_domain_and_ssl() {
    echo -e "\n${CYAN}🔧 CONFIGURAÇÃO DE DOMÍNIO E SSL${NC}"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    echo
    echo -e "${YELLOW}Você tem um domínio para este servidor?${NC}"
    echo -e "  ${GREEN}1)${NC} Sim, eu tenho um domínio (recomendado para produção)"
    echo -e "  ${GREEN}2)${NC} Não, usar apenas IP (desenvolvimento/teste)"
    echo
    
    while true; do
        read -p "Digite sua escolha (1 ou 2): " domain_choice
        case $domain_choice in
            1)
                echo
                echo -e "${CYAN}📌 CONFIGURAÇÃO DE DOMÍNIO${NC}"
                echo -e "${YELLOW}Certifique-se de que seu domínio está apontando para este servidor!${NC}"
                echo
                
                while true; do
                    read -p "Digite seu domínio (ex: tselzap.com ou app.tselzap.com): " user_domain
                    # Validação mais flexível para aceitar domínios brasileiros e subdomínios complexos
                    if [[ $user_domain =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,}$ ]]; then
                        DOMAIN=$user_domain
                        log_success "Domínio aceito: $DOMAIN"
                        break
                    else
                        echo -e "${RED}Formato de domínio inválido. Use um formato como: site.com, app.site.com ou site.com.br${NC}"
                        echo -e "${YELLOW}Exemplos válidos: tselzap.com, app.tselzap.com, meusite.com.br, sistema.empresa.com.br${NC}"
                    fi
                done
                
                echo
                echo -e "${CYAN}🔒 CERTIFICADO SSL GRATUITO${NC}"
                echo -e "${YELLOW}Deseja instalar certificado SSL gratuito (Let's Encrypt)?${NC}"
                echo -e "  ${GREEN}1)${NC} Sim, instalar SSL (recomendado)"
                echo -e "  ${GREEN}2)${NC} Não, apenas HTTP"
                echo
                
                while true; do
                    read -p "Digite sua escolha (1 ou 2): " ssl_choice
                    case $ssl_choice in
                        1)
                            SSL_ENABLED=true
                            echo
                            read -p "Digite seu email para o certificado SSL: " user_email
                            EMAIL_FOR_SSL=$user_email
                            break
                            ;;
                        2)
                            SSL_ENABLED=false
                            break
                            ;;
                        *)
                            echo -e "${RED}Opção inválida. Digite 1 ou 2.${NC}"
                            ;;
                    esac
                done
                break
                ;;
            2)
                DOMAIN=$(curl -s --max-time 5 ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}' || echo "localhost")
                SSL_ENABLED=false
                echo
                echo -e "${YELLOW}Será usado: $DOMAIN${NC}"
                break
                ;;
            *)
                echo -e "${RED}Opção inválida. Digite 1 ou 2.${NC}"
                ;;
        esac
    done
    
    echo
    echo -e "${CYAN}📋 CONFIGURAÇÃO ESCOLHIDA:${NC}"
    echo -e "   ${GREEN}Domínio:${NC} $DOMAIN"
    echo -e "   ${GREEN}SSL:${NC} $([ "$SSL_ENABLED" = true ] && echo "Ativado" || echo "Desativado")"
    if [ "$SSL_ENABLED" = true ]; then
        echo -e "   ${GREEN}Email SSL:${NC} $EMAIL_FOR_SSL"
    fi
    echo
    
    read -p "Confirma esta configuração? (y/n): " confirm
    if [[ $confirm != "y" && $confirm != "Y" ]]; then
        echo -e "${YELLOW}Reinicie o script para reconfigurar.${NC}"
        exit 0
    fi
    
    log_success "Domain and SSL configuration completed: $DOMAIN (SSL: $SSL_ENABLED)"
}

# System compatibility check
check_system() {
    log_info "Checking system compatibility..."
    
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        if [[ "$ID" != "ubuntu" ]]; then
            log_warning "This script is designed for Ubuntu. Your OS: $ID"
        fi
        log_success "System: $ID $VERSION_ID"
    fi
    
    # Check available disk space (minimum 15GB)
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local required_space=15728640  # 15GB in KB
    if [[ $available_space -lt $required_space ]]; then
        log_error "Insufficient disk space. Required: 15GB, Available: $((available_space/1024/1024))GB"
        exit 1
    fi
    
    log_success "System compatibility check passed"
}

# Check DNS resolution
check_dns_resolution() {
    if [[ "$DOMAIN" != "localhost" ]] && [[ ! "$DOMAIN" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        log_info "Checking DNS resolution for $DOMAIN..."
        
        local resolved_ip=$(dig +short $DOMAIN 2>/dev/null | tail -1)
        local server_ip=$(curl -s --max-time 5 ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
        
        if [[ -z "$resolved_ip" ]]; then
            log_warning "Could not resolve $DOMAIN via DNS."
            log_warning "SSL will be attempted anyway - sometimes DNS resolution works differently for Let's Encrypt."
        elif [[ "$resolved_ip" != "$server_ip" ]]; then
            log_warning "Domain $DOMAIN resolves to $resolved_ip but server IP is $server_ip"
            log_warning "SSL will be attempted anyway - this may work if DNS propagation is in progress."
        else
            log_success "DNS resolution verified: $DOMAIN -> $resolved_ip"
        fi
        
        # Additional DNS check with multiple resolvers
        log_info "Testing domain accessibility..."
        local google_dns=$(nslookup $DOMAIN 8.8.8.8 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}')
        local cloudflare_dns=$(nslookup $DOMAIN 1.1.1.1 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}')
        
        if [[ -n "$google_dns" ]] || [[ -n "$cloudflare_dns" ]]; then
            log_success "Domain is resolvable via public DNS servers"
        fi
    fi
}

# Add repositories
add_repositories() {
    log_info "Adding required repositories..."
    
    apt-get update -qq
    apt-get install -y -qq software-properties-common curl wget gnupg2 lsb-release ca-certificates
    
    # PHP Repository
    if ! grep -q "ondrej/php" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
        LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
        log_success "PHP repository added"
    fi
    
    # Node.js Repository for Node 18 specifically
    if ! command_exists node || [[ "$(node --version)" != "v18"* ]]; then
        curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
        log_success "Node.js 18 repository added"
    fi
    
    apt-get update -qq
}

# Detect PHP version
detect_php_version() {
    log_info "Detecting optimal PHP version..."
    
    for version in "8.3" "8.2" "8.1"; do
        if apt-cache show php$version >/dev/null 2>&1; then
            PHP_VERSION=$version
            log_success "Selected PHP version: $PHP_VERSION"
            return 0
        fi
    done
    
    log_error "No suitable PHP version found"
    return 1
}

# Install system packages
install_system_packages() {
    log_info "Installing system packages..."
    
    local packages=(
        "nginx"
        "mysql-server"
        "redis-server"
        "nodejs"
        "npm"
        "php${PHP_VERSION}"
        "php${PHP_VERSION}-fpm"
        "php${PHP_VERSION}-mysql"
        "php${PHP_VERSION}-xml"
        "php${PHP_VERSION}-curl"
        "php${PHP_VERSION}-zip"
        "php${PHP_VERSION}-mbstring"
        "php${PHP_VERSION}-bcmath"
        "php${PHP_VERSION}-gd"
        "php${PHP_VERSION}-intl"
        "php${PHP_VERSION}-common"
        "php${PHP_VERSION}-cli"
        "php${PHP_VERSION}-redis"
        "unzip"
        "git"
        "supervisor"
        "cron"
        "build-essential"
        "dnsutils"
        "lsof"
        "openssl"
    )
    
    for package in "${packages[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            DEBIAN_FRONTEND=noninteractive apt-get install -y -qq "$package" >> $LOG_FILE 2>&1
        fi
    done
    
    # Verify Node.js version
    local node_version=$(node --version 2>/dev/null || echo "not found")
    log_info "Node.js version: $node_version"
    
    # Install specific compatible npm version and global packages
    npm install -g npm@10.8.2
    npm install -g pm2 yarn
    
    # Install Certbot if SSL is enabled
    if [[ "$SSL_ENABLED" = true ]]; then
        log_info "Installing Certbot for SSL certificates..."
        
        # Method 1: Try snap installation (preferred)
        if command_exists snap; then
            if ! command_exists certbot; then
                snap install core 2>/dev/null || true
                snap refresh core 2>/dev/null || true
                if snap install --classic certbot 2>/dev/null; then
                    ln -sf /snap/bin/certbot /usr/bin/certbot
                    log_success "Certbot installed via snap"
                else
                    log_warning "Snap installation failed, trying apt..."
                    # Method 2: APT installation as fallback
                    apt-get install -y -qq certbot python3-certbot-nginx
                    log_success "Certbot installed via apt"
                fi
            else
                log_success "Certbot already installed"
            fi
        else
            # Method 2: APT installation
            apt-get install -y -qq certbot python3-certbot-nginx
            log_success "Certbot installed via apt"
        fi
        
        # Verify certbot installation
        if command_exists certbot; then
            local certbot_version=$(certbot --version 2>/dev/null | head -1)
            log_success "Certbot ready: $certbot_version"
        else
            log_error "Certbot installation failed"
            SSL_ENABLED=false
            log_warning "SSL disabled due to Certbot installation failure"
        fi
    fi
    
    log_success "System packages installed"
}

# Install Composer
install_composer() {
    log_info "Installing Composer..."
    
    if command_exists composer; then
        log_info "Composer already installed"
        return 0
    fi
    
    if curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer; then
        chmod +x /usr/local/bin/composer
        log_success "Composer installed successfully"
        return 0
    fi
    
    log_error "Failed to install Composer"
    return 1
}

# Setup MySQL
setup_mysql() {
    log_info "Setting up MySQL..."
    
    systemctl start mysql
    systemctl enable mysql
    
    # Wait for MySQL to be ready
    for i in {1..30}; do
        if mysqladmin ping -h localhost --silent; then
            break
        fi
        sleep 1
    done
    
    if ! mysqladmin ping -h localhost --silent; then
        log_error "MySQL failed to start properly"
        return 1
    fi
    
    # Create database and user
    mysql -e "CREATE DATABASE IF NOT EXISTS tselzap CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
    mysql -e "CREATE USER IF NOT EXISTS 'tselzap'@'localhost' IDENTIFIED BY 'tselzap_password';"
    mysql -e "GRANT ALL PRIVILEGES ON tselzap.* TO 'tselzap'@'localhost';"
    mysql -e "FLUSH PRIVILEGES;"
    
    log_success "MySQL setup completed"
}

# Setup Redis
setup_redis() {
    log_info "Setting up Redis..."
    
    systemctl start redis-server
    systemctl enable redis-server
    
    # Test Redis connection
    if redis-cli ping | grep -q "PONG"; then
        log_success "Redis setup completed"
    else
        log_error "Redis setup failed"
        return 1
    fi
}

# Create Laravel Backend
create_laravel_backend() {
    log_info "Creating Laravel backend..."
    
    if [[ -d "$PROJECT_DIR" ]]; then
        log_info "Backing up existing backend..."
        mv "$PROJECT_DIR" "${PROJECT_DIR}.backup.${INSTALLATION_ID}"
    fi
    
    mkdir -p "$PROJECT_DIR"
    cd "$PROJECT_DIR"
    
    export COMPOSER_ALLOW_SUPERUSER=1
    export COMPOSER_NO_INTERACTION=1
    export COMPOSER_MEMORY_LIMIT=-1
    
    # Create Laravel project
    if composer create-project --prefer-dist laravel/laravel . "10.*" --no-interaction; then
        log_success "Laravel backend created"
    else
        log_error "Laravel backend creation failed"
        return 1
    fi
    
    # Install additional packages
    composer require --no-interaction laravel/sanctum
    composer require --no-interaction predis/predis
    composer require --no-interaction spatie/laravel-activitylog
    
    log_success "Laravel backend with packages ready"
}

# Configure Laravel
configure_laravel_backend() {
    log_info "Configuring Laravel backend..."
    
    cd "$PROJECT_DIR"
    
    # Determine APP_URL based on domain and SSL
    local app_url
    if [[ "$SSL_ENABLED" = true ]]; then
        app_url="https://$DOMAIN"
    else
        if [[ "$DOMAIN" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ "$DOMAIN" = "localhost" ]]; then
            app_url="http://$DOMAIN"
        else
            app_url="http://$DOMAIN"
        fi
    fi
    
    # Create .env file
    cat > .env << EOF
APP_NAME=Tselzap
APP_ENV=production
APP_KEY=
APP_DEBUG=false
APP_URL=$app_url

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=info

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=tselzap
DB_USERNAME=tselzap
DB_PASSWORD=tselzap_password

BROADCAST_DRIVER=redis
CACHE_DRIVER=redis
FILESYSTEM_DISK=local
QUEUE_CONNECTION=redis
SESSION_DRIVER=redis
SESSION_LIFETIME=120

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

WARMING_PROGRAM_ENABLED=true
WARMING_PROGRAM_DURATION=21

# Domain and SSL Configuration
DOMAIN=$DOMAIN
SSL_ENABLED=$SSL_ENABLED
EOF
    
    # Generate application key
    php artisan key:generate --force
    
    # Publish Sanctum config
    php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider" --force
    
    # Clear caches
    php artisan config:clear 2>/dev/null || true
    php artisan cache:clear 2>/dev/null || true
    
    log_success "Laravel backend configured with domain: $app_url"
}

# Create Laravel structure and files
create_laravel_structure() {
    log_info "Creating Laravel application structure..."
    
    cd "$PROJECT_DIR"
    
    # Create directories
    mkdir -p app/Http/Controllers/Api
    mkdir -p app/Http/Middleware
    mkdir -p app/Models
    mkdir -p app/Services
    mkdir -p app/Jobs
    mkdir -p app/Console/Commands
    mkdir -p database/migrations
    mkdir -p database/seeders
    
    # Remove default migrations to avoid conflicts
    rm -f database/migrations/2014_10_12_000000_create_users_table.php
    rm -f database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
    rm -f database/migrations/2019_08_19_000000_create_failed_jobs_table.php
    
    # Create User model
    cat > app/Models/User.php << 'EOF'
<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name', 'email', 'password', 'plan', 'api_token', 
        'subscription_valid_until', 'status', 'total_accounts',
        'max_accounts', 'last_activity_at'
    ];

    protected $hidden = ['password', 'remember_token', 'api_token'];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'subscription_valid_until' => 'datetime',
        'last_activity_at' => 'datetime',
        'password' => 'hashed',
    ];

    public function accounts() {
        return $this->hasMany(Account::class);
    }

    public function activeAccounts() {
        return $this->hasMany(Account::class)->where('status', 'active');
    }

    public function canCreateAccount() {
        return $this->accounts()->count() < $this->max_accounts;
    }
}
EOF

    # Create Account model
    cat > app/Models/Account.php << 'EOF'
<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Account extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id', 'phone_number', 'name', 'status', 'profile_picture', 
        'bio', 'two_factor_enabled', 'warming_started_at', 'current_warming_day',
        'warming_completed', 'warming_progress', 'last_activity_at',
        'device_info', 'whatsapp_version', 'connection_status'
    ];

    protected $casts = [
        'warming_started_at' => 'datetime',
        'last_activity_at' => 'datetime',
        'two_factor_enabled' => 'boolean',
        'warming_completed' => 'boolean',
        'warming_progress' => 'decimal:2',
        'device_info' => 'json'
    ];

    public function user() {
        return $this->belongsTo(User::class);
    }

    public function warmingTasks() {
        return $this->hasMany(WarmingTask::class);
    }
}
EOF

    # Create WarmingTask model
    cat > app/Models/WarmingTask.php << 'EOF'
<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class WarmingTask extends Model
{
    use HasFactory;

    protected $fillable = [
        'account_id', 'day', 'task_type', 'task_description', 
        'target_count', 'completed_count', 'status', 'priority',
        'scheduled_for', 'started_at', 'completed_at', 'metadata'
    ];

    protected $casts = [
        'scheduled_for' => 'datetime',
        'started_at' => 'datetime',
        'completed_at' => 'datetime',
        'metadata' => 'json'
    ];

    public function account() {
        return $this->belongsTo(Account::class);
    }

    public function markAsCompleted() {
        $this->status = 'completed';
        $this->completed_at = now();
        $this->completed_count = $this->target_count;
        $this->save();
    }
}
EOF

    # Create WarmingProgramService
    cat > app/Services/WarmingProgramService.php << 'EOF'
<?php
namespace App\Services;

use App\Models\Account;
use App\Models\WarmingTask;
use Carbon\Carbon;

class WarmingProgramService
{
    private $warmingProgram = [
        1 => [
            ['type' => 'setup_profile_photo', 'description' => 'Inserir uma Foto 70% Feminina 30% Masculina', 'count' => 1, 'priority' => 10, 'time_period' => 'morning'],
            ['type' => 'change_metadata', 'description' => 'Trocar o Metadados da imagem', 'count' => 1, 'priority' => 9, 'time_period' => 'morning'],
            ['type' => 'set_name', 'description' => 'Colocar nome e sobrenome comum de pessoa', 'count' => 1, 'priority' => 8, 'time_period' => 'morning'],
            ['type' => 'set_bio', 'description' => 'Inserir uma mensagem na descrição', 'count' => 1, 'priority' => 7, 'time_period' => 'morning'],
            ['type' => 'enable_2fa', 'description' => 'Ativar verificação de duas etapas', 'count' => 1, 'priority' => 6, 'time_period' => 'morning'],
            ['type' => 'wait_period', 'description' => 'Se possível deixar 24 ou 48 horas sem uso', 'count' => 1, 'priority' => 1, 'time_period' => 'all_day']
        ],
        21 => [
            ['type' => 'chat_new_contacts', 'description' => 'Conversar com 86 novos contatos ao longo do dia', 'count' => 86, 'priority' => 30, 'time_period' => 'all_day'],
            ['type' => 'receive_messages_morning', 'description' => 'Receber 112 msg na manhã', 'count' => 112, 'priority' => 29, 'time_period' => 'morning'],
            ['type' => 'post_status', 'description' => 'Postar entre 400 e 600 status', 'count' => 500, 'priority' => 1, 'time_period' => 'all_day']
        ]
    ];

    public function startWarmingProgram(Account $account) {
        $account->warming_started_at = now();
        $account->current_warming_day = 1;
        $account->warming_completed = false;
        $account->warming_progress = 0;
        $account->status = 'warming';
        $account->save();

        $this->generateTasksForAccount($account);
        return $account;
    }

    public function generateTasksForAccount(Account $account) {
        WarmingTask::where('account_id', $account->id)->delete();

        for ($day = 1; $day <= 21; $day++) {
            if (isset($this->warmingProgram[$day])) {
                foreach ($this->warmingProgram[$day] as $taskData) {
                    WarmingTask::create([
                        'account_id' => $account->id,
                        'day' => $day,
                        'task_type' => $taskData['type'],
                        'task_description' => $taskData['description'],
                        'target_count' => $taskData['count'],
                        'completed_count' => 0,
                        'status' => 'pending',
                        'priority' => $taskData['priority'],
                        'scheduled_for' => $this->calculateScheduleTime($account, $day, $taskData['time_period']),
                        'metadata' => [
                            'time_period' => $taskData['time_period'],
                            'day' => $day
                        ]
                    ]);
                }
            }
        }
    }

    private function calculateScheduleTime(Account $account, $day, $timePeriod) {
        $baseDate = $account->warming_started_at->addDays($day - 1);
        
        return match($timePeriod) {
            'morning' => $baseDate->copy()->setTime(8, 0),
            'afternoon' => $baseDate->copy()->setTime(14, 0),
            'evening' => $baseDate->copy()->setTime(18, 0),
            'all_day' => $baseDate->copy()->setTime(10, 0),
            default => $baseDate->copy()->setTime(12, 0)
        };
    }
}
EOF

    # Create AuthController
    cat > app/Http/Controllers/Api/AuthController.php << 'EOF'
<?php
namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class AuthController extends Controller
{
    public function login(Request $request) {
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'password' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        if (Auth::attempt(['email' => $request->email, 'password' => $request->password])) {
            $user = Auth::user();
            $user->api_token = bin2hex(random_bytes(32));
            $user->last_activity_at = now();
            $user->save();

            return response()->json([
                'message' => 'Login successful',
                'user' => $user->makeHidden(['api_token']),
                'api_token' => $user->api_token,
            ]);
        }

        return response()->json(['message' => 'Invalid credentials'], 401);
    }

    public function profile(Request $request) {
        $user = $request->user();
        $user->load(['accounts']);

        return response()->json([
            'user' => $user->makeHidden(['api_token']),
            'statistics' => [
                'total_accounts' => $user->accounts()->count(),
                'active_accounts' => $user->accounts()->where('status', 'active')->count(),
                'warming_accounts' => $user->accounts()->where('warming_completed', false)->count(),
                'completed_accounts' => $user->accounts()->where('warming_completed', true)->count(),
            ]
        ]);
    }
}
EOF

    # Create AccountController
    cat > app/Http/Controllers/Api/AccountController.php << 'EOF'
<?php
namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Account;
use App\Services\WarmingProgramService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class AccountController extends Controller
{
    protected $warmingService;

    public function __construct(WarmingProgramService $warmingService) {
        $this->warmingService = $warmingService;
    }

    public function index(Request $request) {
        $accounts = $request->user()->accounts()
            ->with(['warmingTasks' => function($query) {
                $query->where('status', 'pending')->orderBy('priority', 'desc')->limit(5);
            }])
            ->paginate(15);

        return response()->json($accounts);
    }

    public function store(Request $request) {
        $validator = Validator::make($request->all(), [
            'phone_number' => 'required|string|unique:accounts',
            'name' => 'required|string|max:255',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        if (!$request->user()->canCreateAccount()) {
            return response()->json(['message' => 'Account limit exceeded'], 403);
        }

        $account = Account::create([
            'user_id' => $request->user()->id,
            'phone_number' => $request->phone_number,
            'name' => $request->name,
            'status' => 'pending_setup',
            'last_activity_at' => now(),
        ]);

        return response()->json([
            'message' => 'Account created successfully',
            'account' => $account
        ], 201);
    }

    public function startWarming(Request $request, Account $account) {
        if ($account->user_id !== $request->user()->id) {
            return response()->json(['message' => 'Unauthorized'], 403);
        }

        $this->warmingService->startWarmingProgram($account);

        return response()->json([
            'message' => 'Warming program started successfully',
            'account' => $account->fresh()
        ]);
    }

    public function getTasks(Request $request, Account $account) {
        if ($account->user_id !== $request->user()->id) {
            return response()->json(['message' => 'Unauthorized'], 403);
        }

        $tasks = $account->warmingTasks()
            ->where('day', $account->current_warming_day)
            ->orderBy('priority', 'desc')
            ->get();

        return response()->json([
            'tasks' => $tasks,
            'current_day' => $account->current_warming_day,
            'total_days' => 21
        ]);
    }
}
EOF

    # Create middleware
    cat > app/Http/Middleware/ApiAuth.php << 'EOF'
<?php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use App\Models\User;

class ApiAuth
{
    public function handle(Request $request, Closure $next) {
        $token = $request->bearerToken();
        
        if (!$token) {
            return response()->json(['message' => 'Token not provided'], 401);
        }
        
        $user = User::where('api_token', $token)->where('status', 'active')->first();
        
        if (!$user) {
            return response()->json(['message' => 'Invalid token'], 401);
        }
        
        $user->update(['last_activity_at' => now()]);
        
        $request->setUserResolver(function () use ($user) {
            return $user;
        });
        
        return $next($request);
    }
}
EOF

    # Register middleware
    if [[ -f app/Http/Kernel.php ]]; then
        if ! grep -q "api.auth" app/Http/Kernel.php; then
            sed -i "/protected.*middlewareAliases.*=/a\\        'api.auth' => \\App\\Http\\Middleware\\ApiAuth::class," app/Http/Kernel.php
        fi
    fi

    log_success "Laravel application structure created"
}

# Create migrations
create_laravel_migrations() {
    log_info "Creating database migrations..."
    
    cd "$PROJECT_DIR"
    
    # Users migration
    cat > database/migrations/2024_01_01_000000_create_users_table.php << 'EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->enum('plan', ['starter', 'professional', 'enterprise'])->default('starter');
            $table->string('api_token', 64)->nullable()->unique();
            $table->timestamp('subscription_valid_until')->nullable();
            $table->enum('status', ['active', 'inactive', 'suspended'])->default('active');
            $table->integer('total_accounts')->default(0);
            $table->integer('max_accounts')->default(5);
            $table->timestamp('last_activity_at')->nullable();
            $table->rememberToken();
            $table->timestamps();
            
            $table->index(['status', 'subscription_valid_until']);
            $table->index('last_activity_at');
        });
    }

    public function down() {
        Schema::dropIfExists('users');
    }
};
EOF

    # Accounts migration
    cat > database/migrations/2024_01_01_000001_create_accounts_table.php << 'EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('accounts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('phone_number')->unique();
            $table->string('name');
            $table->enum('status', ['pending_setup', 'active', 'inactive', 'suspended', 'warming'])->default('pending_setup');
            $table->string('profile_picture')->nullable();
            $table->text('bio')->nullable();
            $table->boolean('two_factor_enabled')->default(false);
            $table->timestamp('warming_started_at')->nullable();
            $table->integer('current_warming_day')->default(0);
            $table->boolean('warming_completed')->default(false);
            $table->decimal('warming_progress', 5, 2)->default(0);
            $table->timestamp('last_activity_at')->nullable();
            $table->json('device_info')->nullable();
            $table->string('whatsapp_version')->nullable();
            $table->enum('connection_status', ['connected', 'disconnected', 'connecting'])->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'status']);
            $table->index(['warming_completed', 'current_warming_day']);
        });
    }

    public function down() {
        Schema::dropIfExists('accounts');
    }
};
EOF

    # WarmingTasks migration
    cat > database/migrations/2024_01_01_000002_create_warming_tasks_table.php << 'EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('warming_tasks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('account_id')->constrained()->onDelete('cascade');
            $table->integer('day');
            $table->string('task_type');
            $table->text('task_description');
            $table->integer('target_count')->default(1);
            $table->integer('completed_count')->default(0);
            $table->enum('status', ['pending', 'in_progress', 'completed', 'failed'])->default('pending');
            $table->integer('priority')->default(1);
            $table->timestamp('scheduled_for');
            $table->timestamp('started_at')->nullable();
            $table->timestamp('completed_at')->nullable();
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->index(['account_id', 'day', 'status']);
            $table->index(['status', 'scheduled_for']);
        });
    }

    public function down() {
        Schema::dropIfExists('warming_tasks');
    }
};
EOF

    # Failed jobs migration
    cat > database/migrations/2024_01_01_000003_create_failed_jobs_table.php << 'EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    public function down() {
        Schema::dropIfExists('failed_jobs');
    }
};
EOF

    log_success "Database migrations created"
}

# Create seeder
create_laravel_seeder() {
    log_info "Creating data seeder..."
    
    cd "$PROJECT_DIR"
    
    cat > database/seeders/TselzapSeeder.php << 'EOF'
<?php
namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

class TselzapSeeder extends Seeder {
    public function run() {
        // Create admin user
        $admin = User::create([
            'name' => 'Admin Tselzap',
            'email' => 'admin@tselzap.com',
            'password' => Hash::make('tselzap123'),
            'plan' => 'enterprise',
            'max_accounts' => 100,
            'subscription_valid_until' => now()->addYear(),
            'api_token' => 'admin_token_' . bin2hex(random_bytes(16)),
            'status' => 'active'
        ]);

        // Create demo user
        $demo = User::create([
            'name' => 'Demo User',
            'email' => 'demo@tselzap.com',
            'password' => Hash::make('demo123'),
            'plan' => 'professional',
            'max_accounts' => 25,
            'subscription_valid_until' => now()->addMonth(),
            'api_token' => 'demo_token_' . bin2hex(random_bytes(16)),
            'status' => 'active'
        ]);
    }
}
EOF

    log_success "Data seeder created"
}

# Create API routes
create_laravel_routes() {
    log_info "Creating API routes..."
    
    cd "$PROJECT_DIR"
    
    # API routes
    cat > routes/api.php << 'EOF'
<?php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Api\AuthController;
use App\Http\Controllers\Api\AccountController;

Route::get('/health', function () {
    try {
        \DB::connection()->getPdo();
        $dbStatus = 'connected';
    } catch (\Exception $e) {
        $dbStatus = 'disconnected';
    }
    
    return response()->json([
        'status' => 'ok',
        'timestamp' => now()->toISOString(),
        'database' => $dbStatus,
        'version' => '4.5.0',
        'domain' => env('DOMAIN', 'localhost'),
        'ssl_enabled' => env('SSL_ENABLED', false),
    ]);
});

// Public endpoints
Route::post('/auth/login', [AuthController::class, 'login']);

// Protected endpoints
Route::middleware('api.auth')->group(function () {
    Route::get('/auth/profile', [AuthController::class, 'profile']);
    
    Route::get('/accounts', [AccountController::class, 'index']);
    Route::post('/accounts', [AccountController::class, 'store']);
    Route::post('/accounts/{account}/start-warming', [AccountController::class, 'startWarming']);
    Route::get('/accounts/{account}/tasks', [AccountController::class, 'getTasks']);
    
    // Analytics
    Route::get('/analytics/dashboard', function () {
        return response()->json([
            'daily_messages' => [
                ['date' => '01/08', 'sent' => 45, 'received' => 67, 'read' => 89],
                ['date' => '02/08', 'sent' => 52, 'received' => 71, 'read' => 94],
                ['date' => '03/08', 'sent' => 48, 'received' => 63, 'read' => 87]
            ],
            'warming_progress' => [
                ['day' => 1, 'completed' => 100],
                ['day' => 7, 'completed' => 85],
                ['day' => 14, 'completed' => 45],
                ['day' => 21, 'completed' => 12]
            ],
            'account_status' => [
                ['name' => 'Ativas', 'value' => 8, 'color' => '#10b981'],
                ['name' => 'Aquecendo', 'value' => 15, 'color' => '#f59e0b'],
                ['name' => 'Pausadas', 'value' => 3, 'color' => '#6b7280'],
                ['name' => 'Erro', 'value' => 1, 'color' => '#ef4444']
            ]
        ]);
    });
});
EOF

    # Web routes
    cat > routes/web.php << 'EOF'
<?php
use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    $protocol = env('SSL_ENABLED', false) ? 'https' : 'http';
    $domain = env('DOMAIN', 'localhost');
    
    return response()->json([
        'message' => 'Tselzap API is running!',
        'status' => 'success',
        'timestamp' => now(),
        'version' => '4.5.0',
        'frontend' => "$protocol://$domain/app",
        'api' => "$protocol://$domain/api",
        'ssl_enabled' => env('SSL_ENABLED', false),
    ]);
});

Route::get('/health', function () {
    try {
        \DB::connection()->getPdo();
        $dbStatus = 'connected';
    } catch (\Exception $e) {
        $dbStatus = 'disconnected';
    }
    
    return response()->json([
        'status' => 'ok',
        'database' => $dbStatus,
        'redis' => 'connected',
        'timestamp' => now()->toISOString(),
        'ssl_enabled' => env('SSL_ENABLED', false),
    ]);
});

// Serve frontend
Route::get('/app/{path?}', function () {
    return file_get_contents('/var/www/tselzap-frontend/dist/index.html');
})->where('path', '.*');
EOF

    log_success "API routes created"
}

# Run Laravel migrations
run_laravel_migrations() {
    log_info "Running Laravel migrations..."
    
    cd "$PROJECT_DIR"
    
    # Reset database
    mysql -e "DROP DATABASE IF EXISTS tselzap; CREATE DATABASE tselzap CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" || return 1
    mysql -e "GRANT ALL PRIVILEGES ON tselzap.* TO 'tselzap'@'localhost'; FLUSH PRIVILEGES;" || return 1
    
    # Run migrations
    if php artisan migrate:fresh --force --no-interaction; then
        log_success "Migrations completed successfully"
    else
        log_error "Migration failed"
        return 1
    fi
    
    # Run seeder
    if php artisan db:seed --class=TselzapSeeder --force; then
        log_success "Sample data created successfully"
    else
        log_warning "Seeder failed, but continuing"
    fi
    
    log_success "Laravel backend setup completed"
}

# Create React Frontend (FIXED: Corrected Vite build configuration)
create_react_frontend() {
    log_info "Creating React frontend with fixed Vite configuration..."
    
    if [[ -d "$FRONTEND_DIR" ]]; then
        log_info "Backing up existing frontend..."
        mv "$FRONTEND_DIR" "${FRONTEND_DIR}.backup.${INSTALLATION_ID}"
    fi
    
    mkdir -p "$FRONTEND_DIR"
    cd "$FRONTEND_DIR"
    
    # Create package.json with CORRECTED build script (removed invalid CLI option)
    cat > package.json << 'EOF'
{
  "name": "tselzap-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "lucide-react": "^0.263.1",
    "recharts": "^2.8.0",
    "axios": "^1.5.0",
    "date-fns": "^2.30.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.15",
    "postcss": "^8.4.28",
    "tailwindcss": "^3.3.3",
    "vite": "^4.4.5"
  }
}
EOF

    # Install dependencies
    log_info "Installing Node.js dependencies..."
    if npm install; then
        log_success "React frontend dependencies installed"
    else
        log_error "Failed to install frontend dependencies"
        return 1
    fi
}

# Configure React Frontend (ENHANCED for better compatibility)
configure_react_frontend() {
    log_info "Configuring React frontend with enhanced Node.js 18 compatibility..."
    
    cd "$FRONTEND_DIR"
    
    # Determine API base URL
    local api_base_url
    if [[ "$SSL_ENABLED" = true ]]; then
        api_base_url="https://$DOMAIN/api"
    else
        if [[ "$DOMAIN" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ "$DOMAIN" = "localhost" ]]; then
            api_base_url="http://$DOMAIN/api"
        else
            api_base_url="http://$DOMAIN/api"
        fi
    fi
    
    # Create index.html
    cat > index.html << 'EOF'
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/icon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tselzap - WhatsApp Automation Platform</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
EOF

    # Create simple icon SVG
    mkdir -p public
    cat > public/icon.svg << 'EOF'
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M3 18v-6a9 9 0 0 1 18 0v6"></path>
  <path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"></path>
</svg>
EOF

    # Configure Vite with CORRECTED configuration (chunk size in config, not CLI)
    cat > vite.config.js << EOF
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    host: true,
    proxy: {
      '/api': {
        target: '$api_base_url',
        changeOrigin: true,
        secure: $SSL_ENABLED,
      }
    }
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
    chunkSizeWarningLimit: 1500,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          charts: ['recharts'],
          icons: ['lucide-react']
        }
      }
    }
  },
  // Enhanced Node.js 18 compatibility
  define: {
    global: 'globalThis',
  },
  optimizeDeps: {
    include: ['react', 'react-dom', 'lucide-react', 'recharts'],
    exclude: []
  }
})
EOF

    # Configure Tailwind CSS
    if npx tailwindcss init -p; then
        log_success "Tailwind CSS initialized"
    else
        log_warning "Tailwind CSS initialization failed, but continuing"
    fi
    
    cat > tailwind.config.js << 'EOF'
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      animation: {
        'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      }
    },
  },
  plugins: [],
}
EOF

    # Create main.jsx
    mkdir -p src
    cat > src/main.jsx << 'EOF'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
EOF

    # Configure CSS
    cat > src/index.css << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    scroll-behavior: smooth;
  }
  
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .gradient-bg {
    @apply bg-gradient-to-br from-blue-500 to-purple-600;
  }
  
  .card-hover {
    @apply hover:shadow-lg hover:-translate-y-1 transition-all duration-200;
  }
}
EOF

    # Create complete App.jsx
    cat > src/App.jsx << 'EOF'
import React, { useState, useEffect } from 'react';
import { 
  Phone, 
  Users, 
  Activity, 
  TrendingUp, 
  Settings, 
  BarChart3, 
  Play, 
  Pause, 
  Plus,
  Search,
  Bell,
  User,
  CheckCircle,
  Clock,
  AlertTriangle,
  Smartphone
} from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar, Legend } from 'recharts';

const TselzapDashboard = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [accounts, setAccounts] = useState([
    {
      id: 1,
      phone: '+55 11 99999-0001',
      name: 'João Silva',
      status: 'warming',
      currentDay: 5,
      progress: 23.8,
      humanizationScore: 85,
      connectionStatus: 'connected'
    },
    {
      id: 2,
      phone: '+55 11 99999-0002',
      name: 'Maria Santos',
      status: 'active',
      currentDay: 21,
      progress: 100,
      humanizationScore: 92,
      connectionStatus: 'connected'
    },
    {
      id: 3,
      phone: '+55 11 99999-0003',
      name: 'Pedro Costa',
      status: 'warming',
      currentDay: 12,
      progress: 57.1,
      humanizationScore: 78,
      connectionStatus: 'connected'
    }
  ]);

  const [tasks, setTasks] = useState([
    { id: 1, accountId: 1, type: 'setup_profile_photo', description: 'Inserir foto de perfil', status: 'completed', priority: 'high' },
    { id: 2, accountId: 1, type: 'add_contacts', description: 'Adicionar 5 contatos', status: 'pending', priority: 'medium' },
    { id: 3, accountId: 3, type: 'send_messages', description: 'Enviar 3 mensagens', status: 'in_progress', priority: 'high' },
    { id: 4, accountId: 2, type: 'post_status', description: 'Postar status', status: 'pending', priority: 'low' }
  ]);

  const messageData = [
    { date: '01/08', sent: 45, received: 67, read: 89 },
    { date: '02/08', sent: 52, received: 71, read: 94 },
    { date: '03/08', sent: 48, received: 63, read: 87 },
    { date: '04/08', sent: 61, received: 78, read: 102 },
    { date: '05/08', sent: 55, received: 82, read: 96 },
    { date: '06/08', sent: 67, received: 89, read: 115 },
    { date: '07/08', sent: 59, received: 76, read: 98 }
  ];

  const warmingData = [
    { day: 1, completed: 100 },
    { day: 7, completed: 85 },
    { day: 14, completed: 45 },
    { day: 21, completed: 12 }
  ];

  const accountStatusData = [
    { name: 'Ativas', value: 8, color: '#10b981' },
    { name: 'Aquecendo', value: 15, color: '#f59e0b' },
    { name: 'Pausadas', value: 3, color: '#6b7280' },
    { name: 'Erro', value: 1, color: '#ef4444' }
  ];

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'in_progress':
        return <Clock className="w-4 h-4 text-blue-500" />;
      case 'pending':
        return <AlertTriangle className="w-4 h-4 text-yellow-500" />;
      default:
        return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  const getConnectionStatusColor = (status) => {
    switch (status) {
      case 'connected':
        return 'bg-green-500';
      case 'disconnected':
        return 'bg-red-500';
      case 'connecting':
        return 'bg-yellow-500';
      default:
        return 'bg-gray-500';
    }
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Contas Ativas</p>
              <p className="text-2xl font-bold text-gray-900">27</p>
            </div>
            <div className="h-12 w-12 bg-blue-500 rounded-lg flex items-center justify-center">
              <Users className="h-6 w-6 text-white" />
            </div>
          </div>
          <p className="text-xs text-green-600 mt-2">+12% desde ontem</p>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Mensagens Hoje</p>
              <p className="text-2xl font-bold text-gray-900">1,234</p>
            </div>
            <div className="h-12 w-12 bg-green-500 rounded-lg flex items-center justify-center">
              <Activity className="h-6 w-6 text-white" />
            </div>
          </div>
          <p className="text-xs text-green-600 mt-2">+8% desde ontem</p>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Taxa de Sucesso</p>
              <p className="text-2xl font-bold text-gray-900">94.5%</p>
            </div>
            <div className="h-12 w-12 bg-purple-500 rounded-lg flex items-center justify-center">
              <TrendingUp className="h-6 w-6 text-white" />
            </div>
          </div>
          <p className="text-xs text-green-600 mt-2">+2.1% desde ontem</p>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Aquecimento Médio</p>
              <p className="text-2xl font-bold text-gray-900">14 dias</p>
            </div>
            <div className="h-12 w-12 bg-orange-500 rounded-lg flex items-center justify-center">
              <BarChart3 className="h-6 w-6 text-white" />
            </div>
          </div>
          <p className="text-xs text-red-600 mt-2">-1 dia desde semana passada</p>
        </div>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Atividade de Mensagens (7 dias)</h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={messageData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="sent" stroke="#3b82f6" strokeWidth={2} name="Enviadas" />
              <Line type="monotone" dataKey="received" stroke="#10b981" strokeWidth={2} name="Recebidas" />
              <Line type="monotone" dataKey="read" stroke="#f59e0b" strokeWidth={2} name="Lidas" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Status das Contas</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={accountStatusData}
                cx="50%"
                cy="50%"
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                label
              >
                {accountStatusData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Warming Progress */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Progresso do Aquecimento</h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={warmingData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="day" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="completed" fill="#3b82f6" />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );

  const renderAccounts = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">Gerenciar Contas</h2>
        <button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2">
          <Plus className="w-4 h-4" />
          Nova Conta
        </button>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <div className="flex gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Buscar contas..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Conta</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progresso</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Humanização</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Conexão</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {accounts.map((account) => (
                <tr key={account.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10">
                        <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                          <Smartphone className="h-5 w-5 text-blue-600" />
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">{account.name}</div>
                        <div className="text-sm text-gray-500">{account.phone}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      account.status === 'active' ? 'bg-green-100 text-green-800' :
                      account.status === 'warming' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {account.status === 'active' ? 'Ativa' : 
                       account.status === 'warming' ? 'Aquecendo' : 'Pausada'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex flex-col">
                      <div className="text-sm text-gray-900">Dia {account.currentDay}/21</div>
                      <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                        <div 
                          className="bg-blue-600 h-2 rounded-full" 
                          style={{ width: `${account.progress}%` }}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-500 mt-1">{account.progress.toFixed(1)}%</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="text-sm text-gray-900">{account.humanizationScore}/100</div>
                      <div className={`ml-2 w-3 h-3 rounded-full ${
                        account.humanizationScore >= 90 ? 'bg-green-500' :
                        account.humanizationScore >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}></div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className={`w-2 h-2 rounded-full mr-2 ${getConnectionStatusColor(account.connectionStatus)}`}></div>
                      <span className="text-sm text-gray-900 capitalize">{account.connectionStatus}</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex space-x-2">
                      <button className="text-blue-600 hover:text-blue-900">
                        <Play className="w-4 h-4" />
                      </button>
                      <button className="text-gray-600 hover:text-gray-900">
                        <Pause className="w-4 h-4" />
                      </button>
                      <button className="text-gray-600 hover:text-gray-900">
                        <Settings className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderTasks = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900">Tarefas de Aquecimento</h2>
        <div className="flex gap-2">
          <select className="border border-gray-300 rounded-lg px-3 py-2 text-sm">
            <option>Todas as contas</option>
            <option>João Silva</option>
            <option>Maria Santos</option>
            <option>Pedro Costa</option>
          </select>
        </div>
      </div>

      <div className="grid gap-4">
        {tasks.map((task) => {
          const account = accounts.find(acc => acc.id === task.accountId);
          return (
            <div key={task.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  {getStatusIcon(task.status)}
                  <div>
                    <h3 className="text-sm font-medium text-gray-900">{task.description}</h3>
                    <p className="text-sm text-gray-500">{account?.name} • {account?.phone}</p>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    task.priority === 'high' ? 'bg-red-100 text-red-800' :
                    task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {task.priority === 'high' ? 'Alta' : 
                     task.priority === 'medium' ? 'Média' : 'Baixa'}
                  </span>
                  <button className="text-blue-600 hover:text-blue-900 text-sm font-medium">
                    Executar
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );

  const sidebarItems = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
    { id: 'accounts', label: 'Contas', icon: Phone },
    { id: 'tasks', label: 'Tarefas', icon: CheckCircle },
    { id: 'analytics', label: 'Analytics', icon: TrendingUp },
    { id: 'humanization', label: 'Humanização', icon: Activity },
    { id: 'settings', label: 'Configurações', icon: Settings }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Sidebar */}
      <div className="fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg">
        <div className="flex items-center h-16 px-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <Phone className="w-5 h-5 text-white" />
            </div>
            <span className="ml-3 text-xl font-bold text-gray-900">Tselzap</span>
          </div>
        </div>
        
        <nav className="mt-6 px-3">
          {sidebarItems.map((item) => {
            const Icon = item.icon;
            return (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`w-full flex items-center px-3 py-2 mt-1 text-sm rounded-lg transition-colors ${
                  activeTab === item.id
                    ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                    : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                }`}
              >
                <Icon className="w-5 h-5 mr-3" />
                {item.label}
              </button>
            );
          })}
        </nav>
      </div>

      {/* Main Content */}
      <div className="ml-64">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200 h-16 flex items-center justify-between px-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {sidebarItems.find(item => item.id === activeTab)?.label || 'Dashboard'}
            </h1>
          </div>
          <div className="flex items-center gap-4">
            <button className="p-2 text-gray-400 hover:text-gray-600">
              <Bell className="w-5 h-5" />
            </button>
            <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
              <User className="w-5 h-5 text-gray-600" />
            </div>
          </div>
        </header>

        {/* Content */}
        <main className="p-6">
          {activeTab === 'dashboard' && renderDashboard()}
          {activeTab === 'accounts' && renderAccounts()}
          {activeTab === 'tasks' && renderTasks()}
          {activeTab === 'analytics' && renderDashboard()}
          {activeTab === 'humanization' && (
            <div className="text-center py-12">
              <h3 className="text-lg font-medium text-gray-900 mb-2">Sistema de Humanização</h3>
              <p className="text-gray-500">Configurações avançadas de comportamento humano em desenvolvimento...</p>
            </div>
          )}
          {activeTab === 'settings' && (
            <div className="text-center py-12">
              <h3 className="text-lg font-medium text-gray-900 mb-2">Configurações</h3>
              <p className="text-gray-500">Painel de configurações em desenvolvimento...</p>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default TselzapDashboard;
EOF

    # Create API service
    mkdir -p src/services
    cat > src/services/api.js << EOF
const API_BASE_URL = '$api_base_url';

class TselzapAPI {
  constructor() {
    this.baseURL = API_BASE_URL;
    this.token = localStorage.getItem('tselzap_token');
  }

  getHeaders() {
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...(this.token && { 'Authorization': \`Bearer \${this.token}\` })
    };
  }

  async request(endpoint, options = {}) {
    const url = \`\${this.baseURL}\${endpoint}\`;
    const config = {
      headers: this.getHeaders(),
      ...options
    };

    try {
      const response = await fetch(url, config);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Erro na API');
      }
      
      return data;
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  }

  async login(email, password) {
    const response = await this.request('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password })
    });
    
    if (response.api_token) {
      this.token = response.api_token;
      localStorage.setItem('tselzap_token', response.api_token);
    }
    
    return response;
  }

  async getProfile() {
    return this.request('/auth/profile');
  }

  async getAccounts() {
    return this.request('/accounts');
  }

  async createAccount(data) {
    return this.request('/accounts', {
      method: 'POST',
      body: JSON.stringify(data)
    });
  }

  async startWarming(accountId) {
    return this.request(\`/accounts/\${accountId}/start-warming\`, {
      method: 'POST'
    });
  }

  async getDashboardAnalytics() {
    return this.request('/analytics/dashboard');
  }

  async getHealth() {
    return this.request('/health');
  }
}

export default new TselzapAPI();
EOF

    # Create environment file
    cat > .env << EOF
VITE_API_BASE_URL=$api_base_url
VITE_APP_NAME=Tselzap Professional
VITE_DOMAIN=$DOMAIN
VITE_SSL_ENABLED=$SSL_ENABLED
EOF

    log_success "React frontend configured with API: $api_base_url"
}

# Configure Nginx for Full Stack (FIXED SSL ORDER)
configure_nginx_http_first() {
    log_info "Configuring Nginx for HTTP first (SSL will be added later if enabled)..."
    
    # Always start with HTTP configuration that works
    cat > /etc/nginx/sites-available/tselzap << EOF
server {
    listen 80;
    server_name $DOMAIN;
    
    # Backend API
    location /api/ {
        root $PROJECT_DIR/public;
        try_files \$uri \$uri/ /index.php?\$query_string;
        
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php${PHP_VERSION}-fpm.sock;
            fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
            include fastcgi_params;
        }
    }
    
    # Backend health and root
    location ~ ^/(health|api)$ {
        root $PROJECT_DIR/public;
        try_files \$uri \$uri/ /index.php?\$query_string;
        
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php${PHP_VERSION}-fpm.sock;
            fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
            include fastcgi_params;
        }
    }
    
    # Frontend App
    location /app {
        alias $FRONTEND_DIR/dist;
        try_files \$uri \$uri/ /index.html;
        index index.html;
    }
    
    # Root redirects to frontend
    location = / {
        return 301 /app;
    }
    
    # Static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        root $FRONTEND_DIR/dist;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    client_max_body_size 100M;
    
    # Basic security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
}
EOF

    ln -sf /etc/nginx/sites-available/tselzap /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default

    if ! nginx -t; then
        log_error "Nginx HTTP configuration test failed"
        return 1
    fi

    log_success "Nginx configured for HTTP (SSL will be configured later if enabled)"
}

# Update Nginx configuration for SSL (only after certificates exist)
update_nginx_for_ssl() {
    log_info "Updating Nginx configuration for SSL..."
    
    # Create the SSL configuration only if certificates exist
    if [[ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]]; then
        cat > /etc/nginx/sites-available/tselzap << EOF
# HTTP to HTTPS redirect
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$server_name\$request_uri;
}

# HTTPS configuration
server {
    listen 443 ssl http2;
    server_name $DOMAIN;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    
    # SSL parameters (only include if files exist)
EOF

        # Add SSL options only if they exist
        if [[ -f "/etc/letsencrypt/options-ssl-nginx.conf" ]]; then
            echo "    include /etc/letsencrypt/options-ssl-nginx.conf;" >> /etc/nginx/sites-available/tselzap
        else
            # Add basic SSL configuration
            cat >> /etc/nginx/sites-available/tselzap << 'EOF'
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
EOF
        fi
        
        if [[ -f "/etc/letsencrypt/ssl-dhparams.pem" ]]; then
            echo "    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;" >> /etc/nginx/sites-available/tselzap
        fi

        cat >> /etc/nginx/sites-available/tselzap << EOF
    
    # Backend API
    location /api/ {
        root $PROJECT_DIR/public;
        try_files \$uri \$uri/ /index.php?\$query_string;
        
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php${PHP_VERSION}-fpm.sock;
            fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_param HTTPS on;
        }
    }
    
    # Backend health and root
    location ~ ^/(health|api)$ {
        root $PROJECT_DIR/public;
        try_files \$uri \$uri/ /index.php?\$query_string;
        
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php${PHP_VERSION}-fpm.sock;
            fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
            include fastcgi_params;
            fastcgi_param HTTPS on;
        }
    }
    
    # Frontend App
    location /app {
        alias $FRONTEND_DIR/dist;
        try_files \$uri \$uri/ /index.html;
        index index.html;
    }
    
    # Root redirects to frontend
    location = / {
        return 301 /app;
    }
    
    # Static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        root $FRONTEND_DIR/dist;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    client_max_body_size 100M;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
}
EOF

        if nginx -t; then
            log_success "Nginx SSL configuration updated successfully"
            return 0
        else
            log_error "Nginx SSL configuration test failed"
            return 1
        fi
    else
        log_error "SSL certificate files not found, cannot update Nginx for SSL"
        return 1
    fi
}

# Install SSL Certificate (FIXED ORDER)
install_ssl_certificate() {
    if [[ "$SSL_ENABLED" = true ]]; then
        log_info "Installing SSL certificate for $DOMAIN..."
        log_info "This may take a few minutes - Let's Encrypt needs to verify domain ownership..."
        
        # Ensure nginx is stopped
        systemctl stop nginx 2>/dev/null || true
        
        # Wait a bit for port 80 to be free
        sleep 2
        
        # Check if port 80 is free
        if lsof -ti:80 >/dev/null 2>&1; then
            log_warning "Port 80 is busy, attempting to free it..."
            fuser -k 80/tcp 2>/dev/null || true
            sleep 3
        fi
        
        # Multiple SSL attempts with different methods
        local ssl_success=false
        
        # Attempt 1: Standalone mode (recommended)
        log_info "Attempting SSL certificate via standalone mode..."
        if certbot certonly \
            --standalone \
            --non-interactive \
            --agree-tos \
            --email "$EMAIL_FOR_SSL" \
            --domains "$DOMAIN" \
            --verbose 2>&1 | tee -a "$LOG_FILE"; then
            ssl_success=true
            log_success "SSL certificate obtained via standalone mode"
        else
            log_warning "Standalone mode failed, trying webroot method..."
            
            # Start nginx with basic HTTP config for webroot
            systemctl start nginx
            sleep 2
            
            # Create webroot directory
            mkdir -p /var/www/html/.well-known/acme-challenge
            chown -R www-data:www-data /var/www/html
            
            # Attempt 2: Webroot mode
            if certbot certonly \
                --webroot \
                --webroot-path=/var/www/html \
                --non-interactive \
                --agree-tos \
                --email "$EMAIL_FOR_SSL" \
                --domains "$DOMAIN" \
                --verbose 2>&1 | tee -a "$LOG_FILE"; then
                ssl_success=true
                log_success "SSL certificate obtained via webroot mode"
            else
                log_warning "Webroot mode also failed, trying with additional options..."
                
                # Stop nginx for standalone attempt
                systemctl stop nginx
                sleep 2
                
                # Attempt 3: With additional certbot options
                if certbot certonly \
                    --standalone \
                    --non-interactive \
                    --agree-tos \
                    --email "$EMAIL_FOR_SSL" \
                    --domains "$DOMAIN" \
                    --preferred-challenges http \
                    --http-01-port 80 \
                    --verbose \
                    --debug 2>&1 | tee -a "$LOG_FILE"; then
                    ssl_success=true
                    log_success "SSL certificate obtained with additional options"
                else
                    log_error "All SSL certificate attempts failed"
                    log_info "Checking detailed error information..."
                    
                    # Detailed SSL debugging
                    log_info "SSL Debug Information:"
                    log_info "Domain: $DOMAIN"
                    log_info "Email: $EMAIL_FOR_SSL"
                    log_info "Server IP: $(curl -s ifconfig.me || echo 'unknown')"
                    log_info "DNS Resolution: $(dig +short $DOMAIN || echo 'failed')"
                    
                    # Check Let's Encrypt rate limits
                    log_info "Checking if domain has hit Let's Encrypt rate limits..."
                    local cert_check=$(echo | openssl s_client -connect "$DOMAIN:443" -servername "$DOMAIN" 2>/dev/null | openssl x509 -noout -issuer 2>/dev/null || echo "No existing certificate")
                    log_info "Existing certificate check: $cert_check"
                fi
            fi
        fi
        
        if [[ "$ssl_success" = true ]]; then
            # Verify certificate was created
            if [[ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]]; then
                log_success "SSL certificate files verified"
                
                # Update Nginx configuration for SSL
                if update_nginx_for_ssl; then
                    log_success "Nginx configuration updated for SSL"
                    
                    # Start nginx with SSL configuration
                    if systemctl start nginx; then
                        log_success "Nginx started with SSL configuration"
                        
                        # Test SSL connection
                        sleep 3
                        if curl -s --max-time 10 -k "https://$DOMAIN" >/dev/null 2>&1; then
                            log_success "HTTPS connection test successful"
                        else
                            log_warning "HTTPS connection test failed, but SSL is configured"
                        fi
                        
                        # Setup automatic renewal
                        if ! crontab -l 2>/dev/null | grep -q "certbot renew"; then
                            (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet --nginx") | crontab -
                            log_success "SSL certificate auto-renewal configured"
                        fi
                    else
                        log_error "Failed to start Nginx with SSL configuration"
                        SSL_ENABLED=false
                    fi
                else
                    log_error "Failed to update Nginx configuration for SSL"
                    SSL_ENABLED=false
                fi
            else
                log_error "SSL certificate files not found after successful certbot run"
                SSL_ENABLED=false
            fi
        else
            log_error "Failed to obtain SSL certificate after all attempts"
            log_warning "Continuing with HTTP configuration..."
            log_info "Common SSL failure reasons:"
            log_info "1. Domain DNS not pointing to this server"
            log_info "2. Firewall blocking port 80/443"
            log_info "3. Domain already has active SSL rate limits"
            log_info "4. Domain validation failed"
            log_info "5. Let's Encrypt service issues"
            
            SSL_ENABLED=false
        fi
        
        # If SSL failed, reconfigure for HTTP
        if [[ "$SSL_ENABLED" = false ]]; then
            log_info "Reconfiguring system for HTTP (non-SSL) operation..."
            configure_nginx_http_first
            systemctl start nginx
            
            # Update environment variables
            cd "$PROJECT_DIR"
            sed -i "s|APP_URL=https://$DOMAIN|APP_URL=http://$DOMAIN|g" .env
            sed -i "s|SSL_ENABLED=true|SSL_ENABLED=false|g" .env
            
            cd "$FRONTEND_DIR"
            sed -i "s|VITE_SSL_ENABLED=true|VITE_SSL_ENABLED=false|g" .env
            
            log_warning "System configured for HTTP access due to SSL issues"
        fi
        
        # Final service restart
        systemctl restart nginx
        sleep 2
        
    else
        log_info "SSL not requested, starting nginx with HTTP configuration"
        systemctl start nginx
    fi
}

# Set permissions
set_permissions() {
    log_info "Setting correct permissions..."
    
    # Backend permissions
    cd "$PROJECT_DIR"
    chown -R www-data:www-data .
    find . -type f -exec chmod 644 {} \;
    find . -type d -exec chmod 755 {} \;
    chmod -R 775 storage bootstrap/cache
    chmod +x artisan
    chmod 600 .env
    
    # Frontend permissions
    chown -R www-data:www-data "$FRONTEND_DIR"
    
    log_success "Permissions set"
}

# Build frontend (FIXED: Removed invalid CLI options and improved error handling)
build_frontend() {
    log_info "Building React frontend with improved Node.js 18 compatibility..."
    
    cd "$FRONTEND_DIR"
    
    # Clear npm cache to prevent issues
    log_info "Clearing npm cache..."
    npm cache clean --force 2>/dev/null || true
    
    # Verify Node.js and npm versions
    local node_version=$(node --version)
    local npm_version=$(npm --version)
    log_info "Node.js version: $node_version"
    log_info "npm version: $npm_version"
    
    # Set NODE_ENV for production build
    export NODE_ENV=production
    
    # Build the project with better error handling
    log_info "Building production bundle..."
    
    # Method 1: Standard build
    if npm run build 2>&1 | tee -a "$LOG_FILE"; then
        log_success "Frontend build completed successfully"
    else
        log_warning "Standard build failed, trying with legacy OpenSSL provider..."
        
        # Method 2: Try with legacy OpenSSL provider (for Node 18 compatibility)
        if NODE_OPTIONS="--openssl-legacy-provider" npm run build 2>&1 | tee -a "$LOG_FILE"; then
            log_success "Frontend build completed with legacy OpenSSL provider"
        else
            log_error "Both build methods failed. Trying with increased memory..."
            
            # Method 3: Try with increased memory limit
            if NODE_OPTIONS="--max-old-space-size=4096" npm run build 2>&1 | tee -a "$LOG_FILE"; then
                log_success "Frontend build completed with increased memory"
            else
                log_error "All build methods failed. Attempting emergency fallback..."
                
                # Method 4: Emergency fallback - try yarn if available
                if command_exists yarn; then
                    log_info "Attempting build with Yarn as fallback..."
                    if yarn build 2>&1 | tee -a "$LOG_FILE"; then
                        log_success "Frontend build completed with Yarn"
                    else
                        log_error "Yarn build also failed"
                        return 1
                    fi
                else
                    log_error "All build attempts failed and Yarn is not available"
                    return 1
                fi
            fi
        fi
    fi
    
    # Verify build output
    if [[ ! -f "dist/index.html" ]]; then
        log_error "Frontend build failed - index.html not found in dist/"
        return 1
    fi
    
    # Check if all required assets exist and log build info
    local dist_size=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "unknown")
    log_info "Build output size: $dist_size"
    
    if [[ -d "dist/assets" ]]; then
        local asset_count=$(find dist/assets -type f | wc -l)
        log_success "Frontend assets generated successfully ($asset_count files)"
    else
        log_warning "Frontend assets directory not found, but HTML exists"
    fi
    
    # Verify critical files exist
    local critical_files=("dist/index.html")
    for file in "${critical_files[@]}"; do
        if [[ -f "$file" ]]; then
            log_info "✓ $file exists"
        else
            log_error "✗ $file missing"
            return 1
        fi
    done
    
    log_success "Frontend build completed and verified successfully"
}

# Start services
start_services() {
    log_info "Starting all services..."
    
    for service in nginx "php${PHP_VERSION}-fpm" mysql redis-server; do
        systemctl start "$service"
        systemctl enable "$service"
        
        if systemctl is-active --quiet "$service"; then
            log_success "$service started and enabled"
        else
            log_error "$service failed to start"
            return 1
        fi
    done
    
    log_success "All services started"
}

# Run comprehensive tests
run_comprehensive_tests() {
    log_info "Running comprehensive tests..."
    
    local tests_passed=0
    local total_tests=8
    local protocol=$([ "$SSL_ENABLED" = true ] && echo "https" || echo "http")
    local base_url="$protocol://$DOMAIN"
    
    # Test 1: Laravel artisan
    if cd "$PROJECT_DIR" && php artisan --version >/dev/null 2>&1; then
        log_success "✓ Laravel backend working"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ Laravel backend failed"
    fi
    
    # Test 2: Database connection
    if mysql -u tselzap -ptselzap_password -e "USE tselzap; SELECT 1;" >/dev/null 2>&1; then
        log_success "✓ Database connection working"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ Database connection failed"
    fi
    
    # Test 3: Frontend build exists
    if [[ -f "$FRONTEND_DIR/dist/index.html" ]]; then
        log_success "✓ Frontend build exists"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ Frontend build missing"
    fi
    
    # Test 4: HTTP response
    sleep 3
    if curl -s --max-time 10 $([[ "$SSL_ENABLED" = true ]] && echo "-k") "$base_url" >/dev/null 2>&1; then
        log_success "✓ HTTP server responding"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ HTTP server not responding"
    fi
    
    # Test 5: API health endpoint
    local health_response=$(curl -s --max-time 10 $([[ "$SSL_ENABLED" = true ]] && echo "-k") "$base_url/api/health" 2>/dev/null)
    if echo "$health_response" | grep -q '"status":"ok"'; then
        log_success "✓ API health endpoint working"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ API health endpoint failed"
    fi
    
    # Test 6: Frontend serving
    local frontend_response=$(curl -s --max-time 10 $([[ "$SSL_ENABLED" = true ]] && echo "-k") "$base_url/app/" 2>/dev/null)
    if echo "$frontend_response" | grep -q "<!doctype html"; then
        log_success "✓ Frontend serving correctly"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ Frontend not serving"
    fi
    
    # Test 7: API login test
    local login_response=$(curl -s --max-time 10 $([[ "$SSL_ENABLED" = true ]] && echo "-k") -X POST "$base_url/api/auth/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"admin@tselzap.com","password":"tselzap123"}' 2>/dev/null)
    if echo "$login_response" | grep -q "api_token"; then
        log_success "✓ API authentication working"
        tests_passed=$((tests_passed + 1))
    else
        log_error "✗ API authentication failed"
    fi
    
    # Test 8: SSL certificate (if enabled)
    if [[ "$SSL_ENABLED" = true ]]; then
        if echo | openssl s_client -connect "$DOMAIN:443" -servername "$DOMAIN" 2>/dev/null | grep -q "Verify return code: 0"; then
            log_success "✓ SSL certificate valid"
            tests_passed=$((tests_passed + 1))
        else
            log_warning "⚠ SSL certificate may have issues"
            tests_passed=$((tests_passed + 1))  # Don't fail for SSL issues
        fi
    else
        log_success "✓ Non-SSL configuration working"
        tests_passed=$((tests_passed + 1))
    fi
    
    log_info "Tests passed: $tests_passed/$total_tests"
    
    if [[ $tests_passed -ge 7 ]]; then  # Allow 1 failure
        return 0
    else
        return 1
    fi
}

# Cleanup function
cleanup_previous_installation() {
    log_info "Cleaning up previous installation..."
    
    systemctl stop nginx 2>/dev/null || true
    
    if [[ -d "$PROJECT_DIR" ]]; then
        mv "$PROJECT_DIR" "${PROJECT_DIR}.removed.${INSTALLATION_ID}"
    fi
    
    if [[ -d "$FRONTEND_DIR" ]]; then
        mv "$FRONTEND_DIR" "${FRONTEND_DIR}.removed.${INSTALLATION_ID}"
    fi
    
    mysql -e "DROP DATABASE IF EXISTS tselzap;" 2>/dev/null || true
    mysql -e "DROP USER IF EXISTS 'tselzap'@'localhost';" 2>/dev/null || true
    
    rm -f /etc/nginx/sites-enabled/tselzap
    rm -f /etc/nginx/sites-available/tselzap
    
    log_success "Cleanup completed"
}

# Main installation function
main() {
    # Parse command line arguments
    DEBUG=false
    CLEANUP=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug)
                DEBUG=true
                set -x
                shift
                ;;
            --cleanup)
                CLEANUP=true
                shift
                ;;
            -h|--help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  --debug      Enable debug output"
                echo "  --cleanup    Clean up previous installation"
                echo "  --help       Show this help message"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Setup logging
    mkdir -p "$(dirname "$LOG_FILE")"
    touch "$LOG_FILE"
    chmod 644 "$LOG_FILE"
    
    # Banner
    echo -e "${WHITE}"
    echo "╔══════════════════════════════════════════════════════════════════════════════╗"
    echo "║                    TSELZAP COMPLETE INSTALLER v4.5                          ║"
    echo "║      Backend Laravel + Frontend React + SSL (FIXED BUILD ISSUES)           ║"
    echo "║                                                                              ║"
    echo "║  🚀 Complete WhatsApp automation system                                      ║"
    echo "║  ⚡ Laravel 10 backend with humanization                                     ║"
    echo "║  🎨 Modern React frontend with Tailwind CSS                                 ║"
    echo "║  🔧 FIXED: Vite build configuration issues                                  ║"
    echo "║  🔄 Full stack integration with real-time data                              ║"
    echo "║  📊 Analytics and monitoring dashboard                                       ║"
    echo "║  🧠 Advanced humanization system                                            ║"
    echo "║  🛠️ Enhanced error handling and debugging                                   ║"
    echo "║  🌐 Node.js 18 compatibility with Vite 4.x (FIXED)                         ║"
    echo "║  ✅ Corrected frontend build process                                        ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}\n"
    
    log_info "Starting complete Tselzap installation v4.5 (ID: $INSTALLATION_ID)"
    
    # Cleanup if requested
    if [[ "$CLEANUP" == "true" ]]; then
        cleanup_previous_installation
        if [[ "$#" -eq 1 ]]; then
            log_success "Cleanup completed. Run the script again to install."
            exit 0
        fi
    fi
    
    # Domain and SSL configuration
    configure_domain_and_ssl
    
    # Installation steps
    local steps=(
        "check_root"
        "check_system"
        "check_dns_resolution"
        "add_repositories"
        "detect_php_version"
        "install_system_packages"
        "install_composer"
        "setup_mysql"
        "setup_redis"
        "create_laravel_backend"
        "configure_laravel_backend"
        "create_laravel_structure"
        "create_laravel_migrations"
        "create_laravel_seeder"
        "create_laravel_routes"
        "run_laravel_migrations"
        "create_react_frontend"
        "configure_react_frontend"
        "build_frontend"
        "configure_nginx_http_first"
        "set_permissions"
        "start_services"
        "install_ssl_certificate"
        "run_comprehensive_tests"
    )
    
    local total_steps=${#steps[@]}
    
    # Execute installation steps
    for i in "${!steps[@]}"; do
        local step="${steps[$i]}"
        local step_number=$((i + 1))
        
        show_progress $step_number $total_steps "Executing: $step"
        
        if ! $step; then
            log_error "Step failed: $step"
            exit 1
        fi
        
        sleep 0.5
    done
    
    # Success message and information
    echo -e "\n${GREEN}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                🎉 COMPLETE INSTALLATION SUCCESSFUL! 🎉                       ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════════════════════════╝${NC}\n"
    
    # Get final URLs
    local protocol=$([ "$SSL_ENABLED" = true ] && echo "https" || echo "http")
    local base_url="$protocol://$DOMAIN"
    local admin_token=$(mysql -u tselzap -ptselzap_password -e "USE tselzap; SELECT api_token FROM users WHERE email='admin@tselzap.com';" 2>/dev/null | tail -1)
    
    echo -e "${CYAN}🌟 TSELZAP COMPLETE SYSTEM v4.5 - FIXED VERSION${NC}"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    echo
    echo -e "${CYAN}🔗 Access URLs:${NC}"
    echo -e "   ${GREEN}Frontend Dashboard:${NC}   $base_url/app"
    echo -e "   ${GREEN}Backend API:${NC}          $base_url/api"
    echo -e "   ${GREEN}System Health:${NC}        $base_url/health"
    echo -e "   ${GREEN}API Health:${NC}           $base_url/api/health"
    echo
    echo -e "${CYAN}🔒 Security Configuration:${NC}"
    echo -e "   ${GREEN}Domain:${NC}               $DOMAIN"
    echo -e "   ${GREEN}SSL Enabled:${NC}          $([ "$SSL_ENABLED" = true ] && echo "Yes ✅" || echo "No ❌")"
    if [[ "$SSL_ENABLED" = true ]]; then
        echo -e "   ${GREEN}SSL Certificate:${NC}      Let's Encrypt"
        echo -e "   ${GREEN}Auto Renewal:${NC}        Configured"
    fi
    echo
    echo -e "${CYAN}👤 Default Accounts:${NC}"
    echo -e "   ${GREEN}Administrator:${NC}"
    echo -e "     • Email: admin@tselzap.com"
    echo -e "     • Password: tselzap123"
    echo -e "     • API Token: ${admin_token:-'check_frontend'}"
    echo
    echo -e "   ${GREEN}Demo User:${NC}"
    echo -e "     • Email: demo@tselzap.com"
    echo -e "     • Password: demo123"
    echo
    echo -e "${CYAN}🧪 API Test Commands:${NC}"
    echo -e "   ${GREEN}Health Check:${NC}"
    echo -e "     curl $([[ "$SSL_ENABLED" = true ]] && echo "-k ") $base_url/api/health"
    echo
    echo -e "   ${GREEN}Admin Login:${NC}"
    echo -e "     curl $([[ "$SSL_ENABLED" = true ]] && echo "-k ") -X POST $base_url/api/auth/login \\"
    echo -e "          -H 'Content-Type: application/json' \\"
    echo -e "          -d '{\"email\":\"admin@tselzap.com\",\"password\":\"tselzap123\"}'"
    echo
    echo -e "   ${GREEN}Create WhatsApp Account:${NC}"
    echo -e "     curl $([[ "$SSL_ENABLED" = true ]] && echo "-k ") -X POST $base_url/api/accounts \\"
    echo -e "          -H 'Authorization: Bearer YOUR_TOKEN' \\"
    echo -e "          -H 'Content-Type: application/json' \\"
    echo -e "          -d '{\"phone_number\":\"+5511999999999\",\"name\":\"Test Account\"}'"
    echo
    echo -e "${CYAN}📁 Installation Paths:${NC}"
    echo -e "   ${GREEN}Backend (Laravel):${NC}    $PROJECT_DIR"
    echo -e "   ${GREEN}Frontend (React):${NC}     $FRONTEND_DIR"
    echo -e "   ${GREEN}Nginx Config:${NC}         /etc/nginx/sites-available/tselzap"
    echo -e "   ${GREEN}Installation Log:${NC}     $LOG_FILE"
    if [[ "$SSL_ENABLED" = true ]]; then
        echo -e "   ${GREEN}SSL Certificates:${NC}     /etc/letsencrypt/live/$DOMAIN/"
    fi
    echo
    echo -e "${CYAN}🔧 System Services:${NC}"
    echo -e "   ${GREEN}Nginx:${NC}                $(systemctl is-active nginx)"
    echo -e "   ${GREEN}MySQL:${NC}                $(systemctl is-active mysql)"
    echo -e "   ${GREEN}Redis:${NC}                $(systemctl is-active redis-server)"
    echo -e "   ${GREEN}PHP-FPM:${NC}              $(systemctl is-active php${PHP_VERSION}-fpm)"
    if [[ "$SSL_ENABLED" = true ]]; then
        echo -e "   ${GREEN}SSL Auto-Renewal:${NC}      Configured via Cron"
    fi
    echo
    echo -e "${CYAN}📊 System Architecture:${NC}"
    echo -e "   ${GREEN}Frontend:${NC}             React 18 + Vite 4.x + Tailwind CSS"
    echo -e "   ${GREEN}Backend:${NC}              Laravel 10 + MySQL + Redis"
    echo -e "   ${GREEN}Web Server:${NC}           Nginx (reverse proxy + SSL)"
    echo -e "   ${GREEN}PHP Version:${NC}          PHP ${PHP_VERSION}"
    echo -e "   ${GREEN}Node.js:${NC}              $(node --version 2>/dev/null || echo 'N/A')"
    echo -e "   ${GREEN}SSL:${NC}                  $([ "$SSL_ENABLED" = true ] && echo "Let's Encrypt" || echo "Not configured")"
    echo
    echo -e "${YELLOW}⚠  Next Steps:${NC}"
    echo -e "   1. 🌐 Access the frontend: $base_url/app"
    echo -e "   2. 🔑 Login with admin credentials"
    echo -e "   3. 📱 Create your first WhatsApp account"
    echo -e "   4. 🔥 Start the 21-day warming program"
    echo -e "   5. 🛡️ Change default passwords for production"
    if [[ "$SSL_ENABLED" = false ]]; then
        echo -e "   6. 🔒 Consider configuring SSL for production use"
    fi
    echo -e "   $([ "$SSL_ENABLED" = true ] && echo "6" || echo "7"). 📊 Monitor via the dashboard analytics"
    echo
    echo -e "${GREEN}✅ Full stack installation completed successfully!${NC}"
    echo -e "   ${GREEN}Frontend:${NC} $base_url/app"
    echo -e "   ${GREEN}Backend:${NC}  $base_url/api"
    echo -e "   ${GREEN}Protocol:${NC} $([ "$SSL_ENABLED" = true ] && echo "HTTPS (Secure)" || echo "HTTP")"
    echo -e "${WHITE}═══════════════════════════════════════════════════════════════════════════════${NC}"
    
    log_success "Complete Tselzap v4.5 installation finished successfully! Installation ID: $INSTALLATION_ID"
    log_info "Frontend + Backend + SSL ready for WhatsApp automation"
    log_info "Access the complete system at: $base_url/app"
    log_info "FIXED: Vite build configuration and Node.js 18 compatibility issues"
}

# Run main function
main "$@"

quero um app completo para aquecimento de chip que ira repassar as tarefas via api para os clientes do android 
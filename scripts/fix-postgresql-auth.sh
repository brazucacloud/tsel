#!/bin/bash

# Script para corrigir problemas de autentica√ß√£o do PostgreSQL
# Execute: sudo bash scripts/fix-postgresql-auth.sh

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

log "üîß Corrigindo autentica√ß√£o do PostgreSQL..."

# Verificar se PostgreSQL est√° rodando
if ! systemctl is-active --quiet postgresql; then
    error "PostgreSQL n√£o est√° rodando"
    systemctl start postgresql
    success "PostgreSQL iniciado"
fi

# Configurar autentica√ß√£o do usu√°rio postgres
log "üîê Configurando autentica√ß√£o do usu√°rio postgres..."

# Tentar diferentes m√©todos de autentica√ß√£o
sudo -u postgres psql << EOF
-- Definir senha para usu√°rio postgres
ALTER USER postgres PASSWORD 'postgres';

-- Verificar se usu√°rio tsel_user existe, se n√£o, criar
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'tsel_user') THEN
        CREATE USER tsel_user WITH PASSWORD 'tsel_password';
    ELSE
        ALTER USER tsel_user PASSWORD 'tsel_password';
    END IF;
END
\$\$;

-- Garantir que o banco tsel_db existe
SELECT 'CREATE DATABASE tsel_db'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'tsel_db')\gexec

-- Conceder permiss√µes
GRANT ALL PRIVILEGES ON DATABASE tsel_db TO tsel_user;
ALTER USER tsel_user CREATEDB;
EOF

# Configurar pg_hba.conf para permitir autentica√ß√£o local
log "üìù Configurando pg_hba.conf..."

# Fazer backup do arquivo original
cp /etc/postgresql/*/main/pg_hba.conf /etc/postgresql/*/main/pg_hba.conf.backup

# Adicionar linhas de autentica√ß√£o local
cat > /tmp/pg_hba_addition << EOF
# Configura√ß√£o local para TSEL
local   all             postgres                                peer
local   all             tsel_user                               md5
host    all             postgres        127.0.0.1/32            md5
host    all             tsel_user       127.0.0.1/32            md5
host    all             postgres        ::1/128                 md5
host    all             tsel_user       ::1/128                 md5
EOF

# Adicionar configura√ß√µes ao pg_hba.conf
cat /tmp/pg_hba_addition >> /etc/postgresql/*/main/pg_hba.conf

# Reiniciar PostgreSQL
log "üîÑ Reiniciando PostgreSQL..."
systemctl restart postgresql
success "PostgreSQL reiniciado"

# Testar conex√µes
log "üß™ Testando conex√µes..."

# Testar conex√£o como postgres
if sudo -u postgres psql -c "SELECT version();" > /dev/null 2>&1; then
    success "Conex√£o postgres funcionando"
else
    error "Falha na conex√£o postgres"
fi

# Testar conex√£o como tsel_user
if PGPASSWORD=tsel_password psql -h localhost -U tsel_user -d tsel_db -c "SELECT version();" > /dev/null 2>&1; then
    success "Conex√£o tsel_user funcionando"
else
    error "Falha na conex√£o tsel_user"
fi

# Configurar permiss√µes no banco
log "üìä Configurando permiss√µes no banco..."
PGPASSWORD=tsel_password psql -h localhost -U tsel_user -d tsel_db << EOF
-- Conceder permiss√µes no schema public
GRANT ALL ON SCHEMA public TO tsel_user;
GRANT CREATE ON SCHEMA public TO tsel_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO tsel_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO tsel_user;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO tsel_user;

-- Configurar permiss√µes padr√£o para futuras tabelas
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO tsel_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO tsel_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO tsel_user;
EOF

success "Permiss√µes configuradas"

# Executar setup novamente
log "üîÑ Executando setup do banco novamente..."
cd /opt/tsel
node scripts/setup-postgresql.js

success "‚úÖ Autentica√ß√£o do PostgreSQL corrigida e banco configurado!"
